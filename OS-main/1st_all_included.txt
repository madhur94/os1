// copy.c
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>

int main(int argc, char *argv[]) {
    if (argc != 3) {
        printf("Usage: ./copy source_file dest_file\n");
        return 1;
    }

    int src = open(argv[1], O_RDONLY);
    if (src < 0) {
        perror("Source file error");
        return 1;
    }

    int dest = open(argv[2], O_WRONLY | O_CREAT | O_TRUNC, 0644);
    if (dest < 0) {
        perror("Destination file error");
        close(src);
        return 1;
    }

    char buf[1024];
    ssize_t bytes;
    while ((bytes = read(src, buf, sizeof(buf))) > 0) {
        write(dest, buf, bytes);
    }

    close(src);
    close(dest);
    return 0;
}


// grep_sim.c
#include <stdio.h>
#include <string.h>

int main(int argc, char *argv[]) {
    if (argc != 3) {
        printf("Usage: ./grep_sim word filename\n");
        return 1;
    }

    char *word = argv[1];
    char *file = argv[2];

    FILE *fp = fopen(file, "r");
    if (!fp) {
        perror("File open failed");
        return 1;
    }

    char line[1024];
    while (fgets(line, sizeof(line), fp)) {
        if (strstr(line, word)) {
            printf("%s", line);
        }
    }

    fclose(fp);
    return 0;
}



// main.c
#include <stdio.h>
#include <unistd.h>
#include <sys/wait.h>

int main() {
    int choice;
    char src[100], dest[100], word[100];

    do {
        printf("\n1. Simulate cp\n2. Simulate grep\n3. Exit\nEnter choice: ");
        scanf("%d", &choice);

        pid_t pid = fork();

        if (pid == 0) {
            // Child process
            if (choice == 1) {
                printf("Enter source file: ");
                scanf("%s", src);
                printf("Enter destination file: ");
                scanf("%s", dest);

                execl("./copy", "copy", src, dest, NULL);
                perror("exec failed");

            } else if (choice == 2) {
                printf("Enter word to search: ");
                scanf("%s", word);
                printf("Enter file name: ");
                scanf("%s", src);

                execl("./grep_sim", "grep_sim", word, src, NULL);
                perror("exec failed");
            } else {
                _exit(0);
            }

        } else if (pid > 0) {
            wait(NULL); // Parent waits
        } else {
            perror("fork failed");
        }

    } while (choice != 3);

    return 0;
}
